version: "3"

vars:

  REGISTRY_IMAGE: "registry:2"
  REGISTRY_NAME: playground
  REGISTRY_PORT: 5001

  KIND_CLUSTER_NODE_IMAGE: "kindest/node:v1.31.0@sha256:53df588e04085fd41ae12de0c3fe4c72f7013bba32a20e7325357a1ac94ba865"
  KIND_CLUSTER_NAME: playground
  KIND_CLUSTER_CONFIG: "{{.TASKFILE_DIR}}/config.yaml"

tasks:

  registry:start:
    desc: Starts container registry
    silent: true
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - |
        #!/usr/bin/env bash
        docker run \
          -d --restart=always \
          -p "127.0.0.1:{{.REGISTRY_PORT}}:5000" \
          --network bridge \
          --name "{{.REGISTRY_NAME}}" \
          --volume "{{.REGISTRY_NAME}}-data:/var/lib/registry" \
          "{{.REGISTRY_IMAGE}}"
    status:
      - |
        #!/usr/bin/env bash
        if [ "$(docker inspect -f '{{`{{.State.Running}}`}}' "{{.REGISTRY_NAME}}" 2>/dev/null || true)" != 'true' ]; then
          exit 1
        fi

  registry:stop:
    desc: Stops container registry
    silent: true
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - docker rm -f "{{.REGISTRY_NAME}}"
    status:
      - |
        #!/usr/bin/env bash
        if [ "$(docker inspect -f '{{`{{.State.Running}}`}}' "{{.REGISTRY_NAME}}" 2>/dev/null || true)" == 'true' ]; then
          exit 1
        fi

  images:pull:
    desc: Pulls all required container images
    silent: true
    deps: ["registry:start"]
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - |
        set -e
        docker pull "{{.REGISTRY_IMAGE}}"
        docker pull "{{.KIND_CLUSTER_NODE_IMAGE}}"
        # cilium
        images=($(helm template charts/cilium/cilium -f charts/cilium/cilium/values.yaml | grep 'image: ' | awk '{print $NF}' | tr -d '"' | uniq | tr '\n' ' '))
        # fluxcd
        images+=($(cat clusters/local/flux-system/gotk-components.yaml | grep 'image: ' | awk '{print $NF}' | sed 's/localhost:5001/docker.io/' | uniq | tr '\n' ' '))
        # secrets store csi driver
        images+=($(helm template ./charts/secrets-store-csi-driver/secrets-store-csi-driver | grep 'image: ' | awk -F'"' '{print $2}' | uniq))
        # ingress nginx
        images+=($(helm template ./charts/ingress-nginx/ingress-nginx | grep 'image: ' | awk '{print $2}' | uniq))
        # cert manager
        images+=($(helm template ./charts/jetstack/cert-manager | grep 'quay.io' | sed 's/=/: "/' | awk -F'"' '{print $2}' | uniq))
        # cert manager csi driver
        images+=($(helm template ./charts/jetstack/cert-manager-csi-driver | grep 'image: ' | awk -F'"' '{print $2}'))
        # cloud native pg + cluster + pgAdmin4
        images+=($(helm template ./charts/cnpg/cloudnative-pg | grep 'image: ' | awk -F'"' '{print $2}' | uniq))
        images+=($(helm template --set 'version.postgresql="17.2"' ./charts/cnpg/cluster | grep 'image' | grep -v PullPolicy | awk '{print $2}' | sed 's/alpine:/docker.io\/alpine:/' | sed 's/"17.2"/17.2/'))
        images+=("docker.io/dpage/pgadmin4:8.14.0")
        # metrics server
        images+=($(helm template ./charts/metrics-server/metrics-server | grep 'image: ' | awk '{print $2}' | uniq))
        # grafana operator + grafana
        images+=($(helm template ./charts/grafana-operator/grafana-operator | grep 'image: ' | awk -F'"' '{print $2}' | uniq))
        images+=("docker.io/grafana/grafana:11.5.0")
        # prometheus operator + prometheus + alertmanager
        images+=($(helm template --set grafana.enabled=false --set alertmanager.enabled=false --set prometheus.enabled=false ./charts/prometheus-community/kube-prometheus-stack | grep 'image: ' | tr -d '"' | awk '{print $2}' | uniq))
        images+=("quay.io/prometheus-operator/prometheus-config-reloader:v0.79.2")
        images+=("quay.io/prometheus/prometheus:v3.1.0")
        images+=("quay.io/prometheus/alertmanager:v0.28.0")
        for image in "${images[@]}"; do
          remote_image="${image}"
          local_image=$(echo "${remote_image}" | awk -F'@' '{print $1}')
          local_image=$(echo "${local_image}" | sed 's/quay.io/localhost:{{.REGISTRY_PORT}}/')
          local_image=$(echo "${local_image}" | sed 's/docker.io/localhost:{{.REGISTRY_PORT}}/')
          local_image=$(echo "${local_image}" | sed 's/registry.k8s.io/localhost:{{.REGISTRY_PORT}}/')
          local_image=$(echo "${local_image}" | sed 's/ghcr.io/localhost:{{.REGISTRY_PORT}}/')
          docker pull "${remote_image}"
          docker tag "${remote_image}" "${local_image}"
          docker push "${local_image}"
        done

  kind:start:
    desc: Starts kind cluster
    silent: true
    deps: ["registry:start"]
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - |
        #!/usr/bin/env bash

        set -e

        # starts up kind cluster
        kind create cluster --name "{{.KIND_CLUSTER_NAME}}" --image "{{.KIND_CLUSTER_NODE_IMAGE}}" --config "{{.KIND_CLUSTER_CONFIG}}"

        # ref: https://kind.sigs.k8s.io/docs/user/local-registry/

        # configured local container registry
        REGISTRY_DIR="/etc/containerd/certs.d/localhost:{{.REGISTRY_PORT}}"
        for node in $(kind get nodes --name "{{.KIND_CLUSTER_NAME}}"); do
          docker exec "${node}" mkdir -p "${REGISTRY_DIR}"
          cat <<EOF | docker exec -i "${node}" cp /dev/stdin "${REGISTRY_DIR}/hosts.toml"
        [host."http://{{.REGISTRY_NAME}}:5000"]
        EOF
        done

        # configures network between kind cluster and container registry
        if [ "$(docker inspect -f='{{`{{json .NetworkSettings.Networks.kind}}`}}' "{{.REGISTRY_NAME}}")" = 'null' ]; then
          docker network connect "kind" "{{.REGISTRY_NAME}}"
        fi

        # document local registry
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: local-registry-hosting
          namespace: kube-public
        data:
          localRegistryHosting.v1: |
            host: "localhost:{{.REGISTRY_PORT}}"
            help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
        EOF

        # install cilium CNI
        helm template charts/cilium/cilium \
          --namespace kube-system \
          --set envoy.image.digest="" \
          --set envoy.image.useDigest=false \
          --set ipam.mode=kubernetes | \
        sed 's/quay.io/localhost:{{.REGISTRY_PORT}}/' | \
        kubectl --context "kind-{{.KIND_CLUSTER_NAME}}" apply -f -

        # wait before cilium is fully up and running
        cilium status --context "kind-{{.KIND_CLUSTER_NAME}}" --wait

        # wait for core-dns and other pods to get up and running
        kubectl --context "kind-{{.KIND_CLUSTER_NAME}}" wait --for=condition=Ready pods --all-namespaces --all --timeout=300s
    status:
      - |
        #!/usr/bin/env bash
        STARTED=$(kind get clusters 2>&1 | grep -E '^{{.KIND_CLUSTER_NAME}}$' | wc -l)
        if [[ "$STARTED" -eq 0 ]]; then
          exit 1
        fi

  kind:stop:
    desc: Stops kind cluster
    silent: true
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - kind delete cluster --name "{{.KIND_CLUSTER_NAME}}"
    status:
      - |
        #!/usr/bin/env bash
        STARTED=$(kind get clusters 2>&1 | grep -E '^{{.KIND_CLUSTER_NAME}}$' | wc -l)
        if [[ "$STARTED" -ne 0 ]]; then
          exit 1
        fi

  sops:bootstrap:
    desc: Bootstrap Age private key (SOPS)
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - |
        mkdir -p ~/.config/sops/age
        if [ ! -f ~/.config/sops/age/keys.txt ]; then
          cp clusters/local/age.agekey ~/.config/sops/age/keys.txt
          chmod 0600 ~/.config/sops/age/keys.txt
        fi
        kubectl create namespace flux-system --save-config --dry-run=client -o yaml | kubectl apply -f -
        cat clusters/local/age.agekey | kubectl create secret generic sops-age -n=flux-system \
          --from-file=age.agekey=/dev/stdin \
          --save-config --dry-run=client -o yaml | kubectl apply -f -

  fluxcd:bootstrap:
    desc: Bootstrap FluxCD control plane
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - |
        flux create secret git flux-system \
          --url=ssh://git@gitlab.com:roku-labs/dotfiles.git \
          --private-key-file=$HOME/.ssh/flux \
          --ssh-key-algorithm=rsa
        kubectl apply -f clusters/local/flux-system/gotk-components.yaml
        kubectl wait --timeout 5m -A --for condition=Ready pods --all
        kubectl wait --for=condition=Established crd gitrepositories.source.toolkit.fluxcd.io
        kubectl wait --for=condition=Established crd kustomizations.kustomize.toolkit.fluxcd.io
        kubectl apply -f clusters/local/flux-system/gotk-sync.yaml

  # flux bootstrap git \
  #   --url=ssh://git@gitlab.com:roku-labs/dotfiles.git \
  #   --branch=main \
  #   --silent \
  #   --ssh-hostkey-algos=rsa-sha2-512,rsa-sha2-256 \
  #   --private-key-file=$HOME/.ssh/flux \
  #   --path=fluxcd/clusters/local \
  #   --registry localhost:5001/fluxcd

  pgadmin:install:
    desc: Install pgAdmin4 to access core/postgres database
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - |
        # fix network policy
        cat <<EOF | kubectl apply -f -
        kind: NetworkPolicy
        apiVersion: networking.k8s.io/v1
        metadata:
          name: pgadmin-allow-any
          namespace: core
        spec:
          podSelector:
            matchLabels:
              app: postgres-pgadmin4
          policyTypes:
            - Ingress
            - Egress
          ingress:
            - {}
          egress:
            - {}
        EOF
        # install pgadmin4 to access postgres database in core namespace
        kubectl cnpg pgadmin4 --dry-run --mode desktop postgres -n core | sed 's/image: dpage/image: localhost:5001\/dpage/' | sed 's/:latest/:8.14.0/' | \
        kubectl apply -f -

  pgadmin:uninstall:
    desc: Uninstall pgAdmin4 to access core/postgres database
    dir: "{{.TASKFILE_DIR}}"
    cmds:
      - |
        kubectl delete netpol pgadmin-allow-any -n core
        kubectl cnpg pgadmin4 --dry-run --mode desktop postgres -n core | sed 's/image: dpage/image: localhost:5001\/dpage/' | sed 's/:latest/:8.14.0/' | \
        kubectl delete -f -

  start:
    desc: Starts local registry and kind cluster with images populated
    silent: true
    cmds:
      - task: kind:start
      - task: sops:bootstrap
      - task: fluxcd:bootstrap
    dir: "{{.TASKFILE_DIR}}"

  stop:
    desc: Stops local registry and kind cluster
    silent: true
    cmds:
      - task: kind:stop
      - task: registry:stop
    dir: "{{.TASKFILE_DIR}}"
